import math as __INL__IMPORT_math;
[__INL__STATE := (None, 1), [math := __INL__IMPORT_math], Circle := type('Circle', (object,), { '__init__': (lambda self, radius: [__INL__STATE := (None, 1), setattr(self, 'radius', radius), __INL__STATE[0]][-1]), 'area': (lambda self: [__INL__STATE := (None, 1), __INL__STATE := (math.pi * self.radius ** 2, 0), __INL__STATE[0]][-1]), 'circumference': (lambda self: [__INL__STATE := (None, 1), __INL__STATE := (2 * math.pi * self.radius, 0), __INL__STATE[0]][-1]) }), print_circle_info := (lambda circle: [__INL__STATE := (None, 1), print('Circle radius:', circle.radius), print('Circle area:', circle.area()), print('Circle circumference:', circle.circumference()), __INL__STATE[0]][-1]), find_max_value := (lambda lst: [__INL__STATE := (None, 1), max_value := lst[0], [[__INL__item := item, [max_value := __INL__item] if __INL__item > max_value else None, [] if __INL__STATE[1] > 1 else None] for item in lst], [__INL__STATE := (max_value, 0)] if __INL__STATE[1] > 0 else None, __INL__STATE[0]][-1]), factorial := (lambda n: [__INL__STATE := (None, 1), [__INL__STATE := (1, 0)] if n == 0 else [__INL__STATE := (n * factorial(n - 1), 0)], [] if __INL__STATE[1] > 0 else None, __INL__STATE[0]][-1]), is_prime := (lambda n: [__INL__STATE := (None, 1), [__INL__STATE := (False, 0)] if n < 2 else None, [[[__INL__i := i, [__INL__STATE := (False, 0)] if n % __INL__i == 0 else None, [] if __INL__STATE[1] > 1 else None] for i in range(2, int(math.sqrt(n)) + 1)], [__INL__STATE := (True, 0)] if __INL__STATE[1] > 0 else None] if __INL__STATE[1] > 0 else None, __INL__STATE[0]][-1]), find_primes := (lambda lst: [__INL__STATE := (None, 1), primes := [], [[__INL__item := item, [primes.append(__INL__item)] if is_prime(__INL__item) else None, [] if __INL__STATE[1] > 1 else None] for item in lst], [__INL__STATE := (primes, 0)] if __INL__STATE[1] > 0 else None, __INL__STATE[0]][-1]), calculate_average := (lambda lst: [__INL__STATE := (None, 1), [__INL__STATE := (None, 0)] if len(lst) == 0 else [__INL__STATE := (sum(lst) / len(lst), 0)], [] if __INL__STATE[1] > 0 else None, __INL__STATE[0]][-1]), numbers := [3, 7, 2, 8, 1, 9, 4, 6, 5], my_circle := Circle(5), print_circle_info(my_circle), max_number := find_max_value(numbers), print('Max value in numbers list:', max_number), factorial_5 := factorial(5), print('Factorial of 5:', factorial_5), prime_numbers := find_primes(numbers), print('Prime numbers in numbers list:', prime_numbers), average_number := calculate_average(numbers), print('Average value in numbers list:', average_number)]